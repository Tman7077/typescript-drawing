{"version":3,"file":"bundle.js","mappings":";;;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://typescript-drawing/./src/index.ts"],"sourcesContent":["\"use strict\";\nconst canvas = document.getElementById('drawingCanvas');\nif (!canvas) {\n    throw new Error('Canvas element not found');\n}\nconst ctx = canvas.getContext('2d');\nif (!ctx) {\n    throw new Error('Unable to get canvas 2D context');\n}\nlet drawing = false;\nlet lineWeight = 5;\nconst lineWeightButtons = document.querySelectorAll('.line-weight-button');\nlineWeightButtons.forEach(button => {\n    button.addEventListener('click', (event) => {\n        const target = event.currentTarget;\n        lineWeight = parseInt(target.getAttribute('thickness') || '5');\n    });\n    const dot = button.querySelector('.line-weight-dot');\n    const weight = (button.getAttribute('thickness') || '5') + 'px';\n    dot.style.height = weight;\n    dot.style.width = weight;\n});\nlet bgCurrentColor = '#FFFFFF';\nconst bgColorButtons = document.querySelectorAll('.bg-color-button');\nbgColorButtons.forEach(button => {\n    button.addEventListener('click', (event) => {\n        const target = event.target;\n        bgCurrentColor = target.getAttribute('color-code') || '#FFFFFF';\n        canvas.style.backgroundColor = bgCurrentColor;\n    });\n});\nlet fgCurrentColor = '#000000';\nconst fgColorButtons = document.querySelectorAll('.fg-color-button');\nconst lineWeightDots = document.querySelectorAll('.line-weight-dot');\nfgColorButtons.forEach(button => {\n    button.addEventListener('click', (event) => {\n        const target = event.target;\n        fgCurrentColor = target.getAttribute('color-code') || '#000000';\n        lineWeightDots.forEach((dot) => {\n            dot.style.backgroundColor = fgCurrentColor;\n        });\n    });\n});\nconst undoStack = [];\nconst saveState = () => {\n    if (ctx) {\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        undoStack.push(imageData);\n    }\n};\nconst restoreState = () => {\n    if (undoStack.length > 0 && ctx) {\n        const imageData = undoStack.pop();\n        if (imageData) {\n            ctx.putImageData(imageData, 0, 0);\n        }\n    }\n};\nconst undoButton = document.getElementById('undo');\nif (undoButton) {\n    undoButton.addEventListener('click', restoreState);\n}\nconst clearCanvas = () => {\n    if (ctx) {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        undoStack.length = 0;\n        bgCurrentColor = '#FFFFFF';\n        canvas.style.backgroundColor = bgCurrentColor;\n        fgCurrentColor = '#000000';\n        lineWeightDots.forEach((dot) => {\n            dot.style.backgroundColor = fgCurrentColor;\n        });\n    }\n};\nconst clearButton = document.getElementById('clear');\nif (clearButton) {\n    clearButton.addEventListener('click', clearCanvas);\n}\nconst startDrawing = (event) => {\n    drawing = true;\n    saveState();\n    draw(event);\n};\nconst stopDrawing = () => {\n    drawing = false;\n    ctx.beginPath();\n};\nconst draw = (event) => {\n    if (!drawing)\n        return;\n    ctx.lineWidth = lineWeight;\n    ctx.lineCap = 'round';\n    ctx.strokeStyle = fgCurrentColor;\n    ctx.lineTo(event.clientX - canvas.offsetLeft, event.clientY - canvas.offsetTop);\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.moveTo(event.clientX - canvas.offsetLeft, event.clientY - canvas.offsetTop);\n};\ncanvas.addEventListener('mousedown', startDrawing);\ncanvas.addEventListener('mouseup', stopDrawing);\ncanvas.addEventListener('mousemove', draw);\n"],"names":[],"sourceRoot":""}